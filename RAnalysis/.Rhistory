var.equal = TRUE)
Ttestmod.noneqvar   <- t.test( data_loop$O_N ~
(as.factor(data_loop$pCO2)),
var.equal = FALSE)
Wilcoxmod           <- wilcox.test(data_loop$O_N ~
as.numeric(as.factor(data_loop$pCO2)))
# normality tests for the anova model - asign
DF_loop$ShapiroWilk <- normality
DF_loop$ResidNorm   <- if( normality > 0.05) {
'YES'} else {'NO'}
DF_loop$Variance     <- variance
DF_loop$HomogVar    <- if( variance > 0.05) {
'YES'} else {'NO'}
if(normality > 0.05 & variance > 0.05) {
DF_loop$model       <- 'Welchs T test, equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.eqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.eqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else if (normality > 0.05 & variance < 0.05) {
DF_loop$model       <- 'Welchs T test, non-equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.noneqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.noneqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else {
DF_loop$model       <- 'Wilcoxon rank sum exact test'
Wilcoxmod
DF_loop$DF.num      <- 'NA'
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Wilcoxmod), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Wilcoxmod), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Wilcoxmod), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
}
# asign loop and cumulative output table
df          <- data.frame(DF_loop) # name dataframe for this single row
Ttest_total <- rbind(Ttest_total,DF_loop) #bind to a cumulative list dataframe
# print(Ttest_total) # print to monitor progress
}
# T-tests
library(purrr)
Ttest_Dates       <- as.data.frame(unique(F1_ON_MasterMEANS$Date)) # call a list to loop in
Ttest_total       <- data.frame() # start dataframe, this will be the master output
DF_loop           <- data.frame(matrix(nrow = 1, ncol = 13)) # create dataframe to save during for loop
colnames(DF_loop) <- c('Date', 'Age', 'Metric', 'model',
'ShapiroWilk', 'ResidNorm', 'Variance',
'HomogVar', 'DF.num' , 'DF.denom', 'Tstat','P_val', 'SigDif') # names for comuns in the for loop
for (i in 1:nrow(Ttest_Dates)) {
date_loop     <- as.character(Ttest_Dates[i,])
data_loop     <- F1_ON_MasterMEANS %>%
dplyr::filter(Date == date_loop) %>%
dplyr::select(Date, Age, pCO2, O_N) %>%
na.omit()
DF_loop$Date        <- date_loop
DF_loop$Age         <- data_loop$Age[1]
DF_loop$Metric      <- 'RR; LENGTH b factor normalized'
# run assumptions
# normality of data
normality <- shapiro.test(data_loop$O_N)[[2]]
# equal variance
variance <- var.test(data_loop$O_N~
as.numeric(as.factor(data_loop$pCO2)))[[3]]
# run all modles
Ttestmod.eqvar      <- t.test( data_loop$O_N ~
(as.factor(data_loop$pCO2)),
var.equal = TRUE)
Ttestmod.noneqvar   <- t.test( data_loop$O_N ~
(as.factor(data_loop$pCO2)),
var.equal = FALSE)
Wilcoxmod           <- wilcox.test(data_loop$O_N ~
as.numeric(as.factor(data_loop$pCO2)))
# normality tests for the anova model - asign
DF_loop$ShapiroWilk <- normality
DF_loop$ResidNorm   <- if( normality > 0.05) {
'YES'} else {'NO'}
DF_loop$Variance     <- variance
DF_loop$HomogVar    <- if( variance > 0.05) {
'YES'} else {'NO'}
if(normality > 0.05 & variance > 0.05) {
DF_loop$model       <- 'Welchs T test, equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.eqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.eqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else if (normality > 0.05 & variance < 0.05) {
DF_loop$model       <- 'Welchs T test, non-equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.noneqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.noneqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else {
DF_loop$model       <- 'Wilcoxon rank sum exact test'
Wilcoxmod
DF_loop$DF.num      <- 'NA'
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Wilcoxmod), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Wilcoxmod), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Wilcoxmod), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
}
# asign loop and cumulative output table
df          <- data.frame(DF_loop) # name dataframe for this single row
Ttest_total <- rbind(Ttest_total,DF_loop) #bind to a cumulative list dataframe
# print(Ttest_total) # print to monitor progress
}
library(tidyr)
Ttest_Dates       <- as.data.frame(unique(F1_ON_MasterMEANS$Date)) # call a list to loop in
Ttest_total       <- data.frame() # start dataframe, this will be the master output
DF_loop           <- data.frame(matrix(nrow = 1, ncol = 13)) # create dataframe to save during for loop
colnames(DF_loop) <- c('Date', 'Age', 'Metric', 'model',
'ShapiroWilk', 'ResidNorm', 'Variance',
'HomogVar', 'DF.num' , 'DF.denom', 'Tstat','P_val', 'SigDif') # names for comuns in the for loop
for (i in 1:nrow(Ttest_Dates)) {
date_loop     <- as.character(Ttest_Dates[i,])
data_loop     <- F1_ON_MasterMEANS %>%
dplyr::filter(Date == date_loop) %>%
dplyr::select(Date, Age, pCO2, O_N) %>%
na.omit()
DF_loop$Date        <- date_loop
DF_loop$Age         <- data_loop$Age[1]
DF_loop$Metric      <- 'RR; LENGTH b factor normalized'
# run assumptions
# normality of data
normality <- shapiro.test(data_loop$O_N)[[2]]
# equal variance
variance <- var.test(data_loop$O_N~
as.numeric(as.factor(data_loop$pCO2)))[[3]]
# run all modles
Ttestmod.eqvar      <- t.test( data_loop$O_N ~
(as.factor(data_loop$pCO2)),
var.equal = TRUE)
Ttestmod.noneqvar   <- t.test( data_loop$O_N ~
(as.factor(data_loop$pCO2)),
var.equal = FALSE)
Wilcoxmod           <- wilcox.test(data_loop$O_N ~
as.numeric(as.factor(data_loop$pCO2)))
# normality tests for the anova model - asign
DF_loop$ShapiroWilk <- normality
DF_loop$ResidNorm   <- if( normality > 0.05) {
'YES'} else {'NO'}
DF_loop$Variance     <- variance
DF_loop$HomogVar    <- if( variance > 0.05) {
'YES'} else {'NO'}
if(normality > 0.05 & variance > 0.05) {
DF_loop$model       <- 'Welchs T test, equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.eqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.eqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else if (normality > 0.05 & variance < 0.05) {
DF_loop$model       <- 'Welchs T test, non-equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.noneqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.noneqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else {
DF_loop$model       <- 'Wilcoxon rank sum exact test'
Wilcoxmod
DF_loop$DF.num      <- 'NA'
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Wilcoxmod), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Wilcoxmod), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Wilcoxmod), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
}
# asign loop and cumulative output table
df          <- data.frame(DF_loop) # name dataframe for this single row
Ttest_total <- rbind(Ttest_total,DF_loop) #bind to a cumulative list dataframe
# print(Ttest_total) # print to monitor progress
}
?tidy
library(broom)
?tidy
Ttest_Dates       <- as.data.frame(unique(F1_ON_MasterMEANS$Date)) # call a list to loop in
Ttest_total       <- data.frame() # start dataframe, this will be the master output
DF_loop           <- data.frame(matrix(nrow = 1, ncol = 13)) # create dataframe to save during for loop
colnames(DF_loop) <- c('Date', 'Age', 'Metric', 'model',
'ShapiroWilk', 'ResidNorm', 'Variance',
'HomogVar', 'DF.num' , 'DF.denom', 'Tstat','P_val', 'SigDif') # names for comuns in the for loop
for (i in 1:nrow(Ttest_Dates)) {
date_loop     <- as.character(Ttest_Dates[i,])
data_loop     <- F1_ON_MasterMEANS %>%
dplyr::filter(Date == date_loop) %>%
dplyr::select(Date, Age, pCO2, O_N) %>%
na.omit()
DF_loop$Date        <- date_loop
DF_loop$Age         <- data_loop$Age[1]
DF_loop$Metric      <- 'RR; LENGTH b factor normalized'
# run assumptions
# normality of data
normality <- shapiro.test(data_loop$O_N)[[2]]
# equal variance
variance <- var.test(data_loop$O_N~
as.numeric(as.factor(data_loop$pCO2)))[[3]]
# run all modles
Ttestmod.eqvar      <- t.test( data_loop$O_N ~
(as.factor(data_loop$pCO2)),
var.equal = TRUE)
Ttestmod.noneqvar   <- t.test( data_loop$O_N ~
(as.factor(data_loop$pCO2)),
var.equal = FALSE)
Wilcoxmod           <- wilcox.test(data_loop$O_N ~
as.numeric(as.factor(data_loop$pCO2)))
# normality tests for the anova model - asign
DF_loop$ShapiroWilk <- normality
DF_loop$ResidNorm   <- if( normality > 0.05) {
'YES'} else {'NO'}
DF_loop$Variance     <- variance
DF_loop$HomogVar    <- if( variance > 0.05) {
'YES'} else {'NO'}
if(normality > 0.05 & variance > 0.05) {
DF_loop$model       <- 'Welchs T test, equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.eqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.eqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else if (normality > 0.05 & variance < 0.05) {
DF_loop$model       <- 'Welchs T test, non-equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.noneqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.noneqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else {
DF_loop$model       <- 'Wilcoxon rank sum exact test'
Wilcoxmod
DF_loop$DF.num      <- 'NA'
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Wilcoxmod), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Wilcoxmod), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Wilcoxmod), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
}
# asign loop and cumulative output table
df          <- data.frame(DF_loop) # name dataframe for this single row
Ttest_total <- rbind(Ttest_total,DF_loop) #bind to a cumulative list dataframe
# print(Ttest_total) # print to monitor progress
}
Ttest_total
write.csv(Ttest_total, "C:/Users/samuel.gurr/Documents/Github_repositories/EAD-ASEB-Airradians_F1F2_Growout_OA/RAnalysis/Output/OxygenNitrogen_ratio/F1/F1_OtoN_Ttest.csv")
knitr::opts_chunk$set(echo = TRUE)
# SET WORKING DIRECTORY
#knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/EAD-ASEB-Airradians_Popgen_OA/") # Sam's
knitr::opts_knit$set(root.dir = "C:/Users/samuel.gurr/Documents/Github_repositories/EAD-ASEB-Airradians_Popgen_OA/") # Sam's
library(tidyverse)
library(vcfR)
library(adegenet)
library(hierfstat)
library(poppr)
library(reshape2)
library(ggplot2)
library(RColorBrewer)
library(scales)
library(OutFLANK) #if (!("OutFLANK" %in% installed.packages())){install_github("whitlock/OutFLANK")}
All.vcf <- vcfR::read.vcfR(here::here(getwd(),
"RAnalysis",
"Data",
"Popgen",
"03_prune",
"out.7.phased.vcf.gz"), verbose = FALSE)
# F1 thorugh F3 low and moderate only!
F1F2F3_LOW_MOD.vcf <- All.vcf[,c(1,27:139,
153:177, 198:250,
295:392)]
F1F2F3_All.vcf <- All.vcf[,c(1,27:392)]
# list ids for all individuals int he vcf file
All.ListIDs  <- colnames(All.vcf@gt[,2:length(colnames(All.vcf@gt))])
# master metadata
All.metadata <- as.data.frame(matrix(ncol = 1,
nrow = length(All.ListIDs))) %>%
mutate(id = All.ListIDs,
type = dplyr::case_when(grepl("-B", id) ~ "broodstock", TRUE ~ 'juvenile'),
gen = dplyr::case_when(grepl("F0", id) ~ "F0",
grepl("F1", id) ~ "F1",
grepl("F2", id) ~ "F2",
grepl("F3", id) ~ "F3",
TRUE ~ "F1"),
treatment = dplyr::case_when(
grepl("F0", id) ~ "none",
grepl("pH7\\.",id) ~ "High",
grepl(c("pH75\\.|.201.|.203.|.204.|.251.|.253.|.254.|.301.|.303.|.304.|.351.|.352.|.353.|.354."), id) ~
"Moderate",
grepl(c("pH8|.101.|.103.|.104.|.153.|.154.|.155.|.3.|.4.|.5."), id) ~
"Low")) %>%
dplyr::mutate(gen_treatment =
dplyr::case_when(gen == "F0" ~ "F0",
gen %in% c("F1","F2","F3") ~ paste0(gen,'_',treatment))) %>%
select(-V1)
# subset for the vcf matrices, we already have it for 'All'
F1F2F3_LOW_MOD.metadata <- All.metadata %>% dplyr::filter(id %in%
colnames(F1F2F3_LOW_MOD.vcf@gt[,2:length(colnames(F1F2F3_LOW_MOD.vcf@gt))]))
F1F2F3_All.metadata     <- All.metadata %>% dplyr::filter(id %in%
colnames(F1F2F3_All.vcf@gt[,2:length(colnames(F1F2F3_All.vcf@gt))]))
F1F2F3_All.metadata     <- All.metadata %>% dplyr::filter(id %in%
colnames(F1F2F3_All.vcf@gt[,2:length(colnames(F1F2F3_All.vcf@gt))]))
# Low v Mod
# first build a preliminary genind, we can movert this to a matrix
F1F2F3_LOW_MOD.gen   <- F1F2F3_LOW_MOD.vcf %>% vcfR::vcfR2genind()
# convert matrix to a dataframe and move the rownames to the first column as 'id'
F1F2F3_LOW_MOD.GenoM <- as.matrix(F1F2F3_LOW_MOD.gen)
F1F2F3_LOW_MOD.DF    <- as.data.frame(F1F2F3_LOW_MOD.GenoM) %>% tibble::rownames_to_column(., "id")
nrow(F1F2F3_LOW_MOD.DF) # 289
# merge the metadata by 'id'
F1F2F3_LOW_MOD.DF.meta <- cbind(F1F2F3_LOW_MOD.DF, F1F2F3_LOW_MOD.metadata, by = 'id')
nrow(F1F2F3_LOW_MOD.DF.meta) # 289 - did not loose data, good to go!
F1F2F3_LOW_MOD.DF.meta
# All
# first build a preliminary genind, we can movert this to a matrix
F1F2F3_All.gen   <- F1F2F3_All.vcf %>% vcfR::vcfR2genind()
# convert matrix to a dataframe and move the rownames to the first column as 'id'
F1F2F3_All.GenoM <- as.matrix(F1F2F3_All.gen)
F1F2F3_All.DF    <- as.data.frame(F1F2F3_All.GenoM) %>% tibble::rownames_to_column(., "id")
nrow(F1F2F3_All.DF) # 366
# merge the metadata by 'id'
F1F2F3_All.DF.meta <- cbind(F1F2F3_All.DF, F1F2F3_All.metadata, by = 'id')
nrow(F1F2F3_All.DF.meta) # 366 - did not loose data, good to go!
# All (F0  F3 all treatments)
# first build a preliminary genind, we can movert this to a matrix
All.gen   <- All.vcf %>% vcfR::vcfR2genind()
# convert matrix to a dataframe and move the rownames to the first column as 'id'
All.GenoM <- as.matrix(All.gen)
All.DF    <- as.data.frame(All.GenoM) %>% tibble::rownames_to_column(., "id")
nrow(All.DF) # 289
# merge the metadata by 'id'
All.DF.meta <- cbind(All.DF, All.metadata, by = 'id')
nrow(All.DF.meta) # 289 - did not loose data, good to go!
loop.df     <- data.frame(matrix(nrow = 1, ncol = 7)) # create dataframe to save cumunalitively during for loop
colnames(loop.df) <- c('locus',
'num_0',
'perc_0',
'num_1',
'perc_1',
'num_2',
'perc_2') # names for columns in the for loop
All.DF.meta
# merge the metadata by 'id'
All.DF.meta <- cbind(All.metadata,All.DF, by = 'id')
All.DF.meta
# merge the metadata by 'id'
All.DF.meta <- merge(All.metadata,All.DF, by = 'id')
nrow(All.DF.meta) # 391 - did not loose data, good to go!
All.DF.meta
All.DF.meta[6]
n_allele_0 <- length(All.DF.meta %>% filter(.[[6]] == 0))
n_allele_0
(All.DF.meta %>% filter(.[[6]] == 0))
All.DF.meta %>% filter(.[[6]] == 0)
All.DF.meta
All.DF.meta <- All.DF.meta %>%  dplyr::select(!matches("\\.0$")) # only call SNPs <id>.1
length(All.DF.meta %>% filter(.[[6]] == 0))
n_allele_1 <- length(All.DF.meta %>% filter(.[[6]] == 1))
n_allele_1
n_allele_0 <- length(All.DF.meta %>% filter(.[[6]] == 0))
n_allele_0
n_allele_1 <- length(All.DF.meta %>% filter(.[[6]] == 1))
n_allele_1
All.DF.meta %>% filter(.[[6]] == 1)
n_allele_1 <- nrow(All.DF.meta %>% filter(.[[6]] %in% 1))
n_allele_1
n_allele_0 <- nrow(All.DF.meta %>% filter(.[[6]] %in% 0))
n_allele_0
n_allele_2 <- nrow(All.DF.meta %>% filter(.[[6]] %in% 2))
n_allele_2
n_allele_0
n_allele_1
All.DF.meta <- All.DF.meta %>%  dplyr::select(!matches("\\.0$")) # only call SNPs <id>.1
loop.output <- data.frame() # start dataframe
loop.df     <- data.frame(matrix(nrow = 1, ncol = 7)) # create dataframe to save cumunalitively during for loop
colnames(loop.df) <- c('locus',
'n_allele_0',
'perc_allele_0',
'n_allele_1',
'perc_allele_1',
'n_allele_2',
'perc_allele_2') # names for columns in the for loop
for (i in 6:ncol()) { # first 6 columns are metadata
num_indivs <- nrow(All.DF.meta)
loop.df$n_allele_0    <- nrow(All.DF.meta %>% filter(.[[i]] %in% 0))
loop.df$perc_allele_0 <- loop.df$n_allele_0[i] / num_indivs
loop.df$n_allele_1    <- nrow(All.DF.meta %>% filter(.[[i]] %in% 1))
loop.df$perc_allele_1 <- loop.df$n_allele_1[i] / num_indivs
loop.df$n_allele_2    <- nrow(All.DF.meta %>% filter(.[[i]] %in% 2))
loop.df$perc_allele_2 <- loop.df$n_allele_2[i] / num_indivs
# sumulative output
loop.output <- rbind(loop.output,loop.df) #bind to a cumulative list dataframe
}
for (i in 6:ncol(All.DF.meta)) { # first 6 columns are metadata
num_indivs <- nrow(All.DF.meta)
loop.df$n_allele_0    <- nrow(All.DF.meta %>% filter(.[[i]] %in% 0))
loop.df$perc_allele_0 <- loop.df$n_allele_0[i] / num_indivs
loop.df$n_allele_1    <- nrow(All.DF.meta %>% filter(.[[i]] %in% 1))
loop.df$perc_allele_1 <- loop.df$n_allele_1[i] / num_indivs
loop.df$n_allele_2    <- nrow(All.DF.meta %>% filter(.[[i]] %in% 2))
loop.df$perc_allele_2 <- loop.df$n_allele_2[i] / num_indivs
# sumulative output
loop.output <- rbind(loop.output,loop.df) #bind to a cumulative list dataframe
}
All.DF.meta <- All.DF.meta %>%  dplyr::select(!matches("\\.0$")) # only call SNPs <id>.1
loop.output <- data.frame() # start dataframe
loop.df     <- data.frame(matrix(nrow = 1, ncol = 7)) # create dataframe to save cumunalitively during for loop
colnames(loop.df) <- c('locus',
'n_allele_0',
'perc_allele_0',
'n_allele_1',
'perc_allele_1',
'n_allele_2',
'perc_allele_2') # names for columns in the for loop
for (i in 6:ncol(All.DF.meta)) { # first 6 columns are metadata
num_indivs <- nrow(All.DF.meta)
loop.df$n_allele_0    <- nrow(All.DF.meta %>% filter(.[[i]] %in% 0))
loop.df$perc_allele_0 <- loop.df$n_allele_0 / num_indivs
loop.df$n_allele_1    <- nrow(All.DF.meta %>% filter(.[[i]] %in% 1))
loop.df$perc_allele_1 <- loop.df$n_allele_1 / num_indivs
loop.df$n_allele_2    <- nrow(All.DF.meta %>% filter(.[[i]] %in% 2))
loop.df$perc_allele_2 <- loop.df$n_allele_2 / num_indivs
# cumulative output
loop.output <- rbind(loop.output,loop.df) #bind to a cumulative list dataframe
}
colnames(All.DF.meta[i])
loop.df$locus         <- colnames(All.DF.meta[i])
loop.df$n_allele_0    <- nrow(All.DF.meta %>% filter(.[[i]] %in% 0))
loop.df$perc_allele_0 <- loop.df$n_allele_0 / num_indivs
loop.df$n_allele_1    <- nrow(All.DF.meta %>% filter(.[[i]] %in% 1))
loop.df$perc_allele_1 <- loop.df$n_allele_1 / num_indivs
loop.df$n_allele_2    <- nrow(All.DF.meta %>% filter(.[[i]] %in% 2))
loop.df$perc_allele_2 <- loop.df$n_allele_2 / num_indivs
# cumulative output
loop.output <- rbind(loop.output,loop.df) #bind to a cumulative list dataframe
loop.output
signif((loop.df$n_allele_1 / num_indivs)*100, digits = 3)
num_indivs <- nrow(All.DF.meta)
loop.df$locus         <- colnames(All.DF.meta[i])
loop.df$n_allele_0    <- nrow(All.DF.meta %>% filter(.[[i]] %in% 0))
loop.df$perc_allele_0 <- signif((loop.df$n_allele_0 / num_indivs)*100, digits = 3)
loop.df$n_allele_1    <- nrow(All.DF.meta %>% filter(.[[i]] %in% 1))
loop.df$perc_allele_1 <- signif((loop.df$n_allele_1 / num_indivs)*100, digits = 3)
loop.df$n_allele_2    <- nrow(All.DF.meta %>% filter(.[[i]] %in% 2))
loop.df$perc_allele_2 <- signif((loop.df$n_allele_2 / num_indivs)*100, digits = 3)
# cumulative output
loop.output <- rbind(loop.output,loop.df) #bind to a cumulative list dataframe
tail(loop.output)
signif(((loop.df$n_allele_2 / num_indivs)*100), digits = 3)
All.DF.meta <- All.DF.meta %>%  dplyr::select(!matches("\\.0$")) # only call SNPs <id>.1
loop.output <- data.frame() # start dataframe
loop.df     <- data.frame(matrix(nrow = 1, ncol = 7)) # create dataframe to save cumunalitively during for loop
colnames(loop.df) <- c('locus',
'n_allele_0',
'perc_allele_0',
'n_allele_1',
'perc_allele_1',
'n_allele_2',
'perc_allele_2') # names for columns in the for loop
for (i in 6:ncol(All.DF.meta)) { # first 6 columns are metadata
num_indivs <- nrow(All.DF.meta)
loop.df$locus         <- colnames(All.DF.meta[i])
loop.df$n_allele_0    <- nrow(All.DF.meta %>% filter(.[[i]] %in% 0))
loop.df$perc_allele_0 <- signif((loop.df$n_allele_0 / num_indivs)*100, digits = 3)
loop.df$n_allele_1    <- nrow(All.DF.meta %>% filter(.[[i]] %in% 1))
loop.df$perc_allele_1 <- signif((loop.df$n_allele_1 / num_indivs)*100, digits = 3)
loop.df$n_allele_2    <- nrow(All.DF.meta %>% filter(.[[i]] %in% 2))
loop.df$perc_allele_2 <- signif((loop.df$n_allele_2 / num_indivs)*100, digits = 3)
# cumulative output
loop.output <- rbind(loop.output,loop.df) #bind to a cumulative list dataframe
}
loop.output
Rmisc::summarySE(loop.output, measurevar = perc_allele_0)
loop.output
Rmisc::summarySE(loop.output, measurevar = 'perc_allele_0')
Rmisc::summarySE(loop.output, measurevar = 'perc_allele_1') # allele 0  = 64.26114	+- 0.5005364 %
Rmisc::summarySE(loop.output, measurevar = 'perc_allele_2') # allele 1  = 34.98679	+- 0.4819276 % of indivs
loop.output
loop.output.chrom <- loop.output %>% mutate(chromosome = gsub("^(CM\\d+).*", "\\1", locus),
position   = as.numeric(gsub(".*_(\\d+)\\.\\d+$", "\\1", locus))) %>%
mutate(chrom_num =
case_when(chromosome  %in% 'CM084264' ~1,
chromosome  %in% 'CM084265' ~2,
chromosome  %in% 'CM084266' ~3,
chromosome  %in% 'CM084267' ~4,
chromosome  %in% 'CM084268' ~5,
chromosome  %in% 'CM084269' ~6,
chromosome  %in% 'CM084270' ~7,
chromosome  %in% 'CM084271' ~8,
chromosome  %in% 'CM084272' ~9,
chromosome  %in% 'CM084273' ~10,
chromosome  %in% 'CM084274' ~11,
chromosome  %in% 'CM084275' ~12,
chromosome  %in% 'CM084276' ~13,
chromosome  %in% 'CM084277' ~14,
chromosome  %in% 'CM084278' ~15,
chromosome  %in% 'CM084279' ~16))
loop.output.chrom
Rmisc::summarySE(loop.output, measurevar = 'perc_allele_0', groupvars = 'chrom_num') # allele 0  = 64.26114	+- 0.5005364 % of indivs
Rmisc::summarySE(loop.output.chrom, measurevar = 'perc_allele_0', groupvars = 'chrom_num') # allele 0  = 64.26114	+- 0.5005364 % of indivs
Rmisc::summarySE(loop.output.chrom, measurevar = 'perc_allele_0') # allele 0  = 64.26114	+- 0.5005364 % of indivs
# group by chromosomenumber - might not be useful..
Rmisc::summarySE(loop.output.chrom, measurevar = 'perc_allele_0', groupvars = 'chrom_num') # allele 0
