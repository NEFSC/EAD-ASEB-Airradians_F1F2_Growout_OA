F1_DryShell <- F1_dryweights_calc %>%
dplyr::select(Age, pCO2, Tank_Replicate, Dry_Shell_weight_g, Shell_length_mm) %>%
na.omit()
# call the mean Shell dry weight
meanLength.all <- mean(F1_DryShell$Shell_length_mm) # 21.93231
seLength.all   <- sd(F1_DryShell$Shell_length_mm)/sqrt(length((F1_DryShell$Shell_length_mm))) # 0.3850383
StandardShellSize = 40
# age range of animals
print(paste0('youngest = ', min(F1_DryShell$Age), '; oldest = ', max(F1_DryShell$Age)))
#assign bfactors
bLength.all <- 2.92 #3.11
bLength.low <- 2.91#3.13
bLength.mod <- 2.92#3.10
# standardize Shell dry weight using bfactors
F1_DryShell.bfactor <- F1_DryShell %>%
dplyr::mutate(
Shell_bFactorLength.all  =  ( (Dry_Shell_weight_g * (Shell_length_mm^-bLength.all))* # a
(StandardShellSize^bLength.all) ) * 100,
Shell_bFactorLength.pCO2 =  case_when(pCO2 == '500 μatm' ~
( (Dry_Shell_weight_g * (Shell_length_mm^-bLength.low))* # a
(StandardShellSize^bLength.low) ) * 100,
pCO2 == '800 μatm' ~
( (Dry_Shell_weight_g * (Shell_length_mm^-bLength.mod))* # a
(StandardShellSize^bLength.mod) ) * 100
) # case when for pCO2
) # mutate
# pivot longer and plot
F1_DryShell.bfactor.long <- F1_DryShell.bfactor %>%
dplyr::select(-Shell_length_mm) %>%
tidyr::pivot_longer(
cols = c(Dry_Shell_weight_g, Shell_bFactorLength.all, Shell_bFactorLength.pCO2),
names_to = "measurement",
values_to = "value"
)
# means by replicate tank
F1_DryShell.bfactor.long.MEANS <- F1_DryShell.bfactor.long %>%
summarySE(measurevar="value",
groupvars=c("Age","pCO2", "Tank_Replicate", "measurement")) %>%
dplyr::arrange(as.numeric(Age))
# mmeans master - median for E-H as A-D!
F1_DryShell.bfactor.long.MEANS_master <- F1_DryShell.bfactor.long.MEANS %>%  # noew convert and resummarize by tank
dplyr::mutate(Tank_Replicate = case_when(
Tank_Replicate == 'E' ~ 'A', #convert E to A
Tank_Replicate == 'F' ~ 'B', #convert F to B
Tank_Replicate == 'G' ~ 'C', #convert G to C
Tank_Replicate == 'H' ~ 'D', #convert H to D
.default = (as.character(Tank_Replicate)) # for cases A-D, keep em my mans
)) %>%
summarySE(measurevar="value",
groupvars=c("Age","pCO2", "Tank_Replicate", "measurement")) %>% # summarize again
dplyr::arrange(as.numeric(Age), measurement, pCO2, Tank_Replicate)
#
Shell_bfactor.MeanSE <-ggplot(F1_DryShell.bfactor.long.MEANS_master,
aes(x=factor(Age),
y=value,
colour=factor(pCO2)),
stat="identity") +
scale_colour_manual(breaks=c("500 μatm", "800 μatm"),
values=c("forestgreen","darkorange2")) +
geom_point(aes(colour = pCO2),
position = position_dodge2(width = 0.5)) +
stat_summary(fun.y="mean", size = 0.8,
position = position_dodge2(width = 0.5)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar', width = 0.25, size = 1,
position = position_dodge2(width = 0.5)) +
labs(title="Mean + SE data",
x ="Age (dpf)",
y = "value") +
# scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# axis.title.y=element_blank(),
# axis.title.x=element_blank(),
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=1),
axis.text=element_text(size=8),
plot.title = element_text(size=12),
legend.position="none") +
facet_wrap(~measurement, scales = "free_y")
pdf("Output/DryWeights/F1/length_scaling/Dry_Shell_byLength.pdf", height=8, width =8)
ggarrange(bfactorShell.Length.all, bfactorShell.Length.pCO2,Shell_bfactor.MeanSE, nrow=3)
dev.off()
Shell_final_plot <- F1_DryShell.bfactor.long.MEANS_master %>%
dplyr::filter(measurement %in% 'Shell_bFactorLength.pCO2') %>%
ggplot(aes(x=factor(Age), y=value, colour=factor(pCO2)),stat="identity") +
scale_colour_manual(breaks=c("500 μatm", "800 μatm"),
values=c("forestgreen","darkorange2")) +
stat_summary(fun.y="mean", size = 0.8,
position = position_dodge2(width = 0.25)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar', width = 0.25, size = 1,
position = position_dodge2(width = 0.5)) +
labs(title="Shell: Length b factor pCO2", x ="Age (dpf)", y = "Dry Shell (mg Lengthbfactor_all)") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=1),
axis.text=element_text(size=8),
plot.title = element_text(size=12),
legend.position="none")
Shell_final_plot_SUBSET <- F1_DryShell.bfactor.long.MEANS_master %>%
dplyr::filter(Age >= 233 & measurement %in% 'Shell_bFactorLength.pCO2') %>%
ggplot(aes(x=factor(Age), y=value, colour=factor(pCO2)),stat="identity") +
scale_colour_manual(breaks=c("500 μatm", "800 μatm"),
values=c("forestgreen","darkorange2")) +
stat_summary(fun.y="mean", size = 0.8,
position = position_dodge2(width = 0.25)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar', width = 0.25, size = 1,
position = position_dodge2(width = 0.5)) +
labs(title="Shell: Length b factor pCO2", x ="Age (dpf)", y = "Dry Shell (mg Lengthbfactor_all)") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=1),
axis.text=element_text(size=8),
plot.title = element_text(size=12),
legend.position="none")
F1_DryShell.raw.MEAN <- F1_DryShell.bfactor.long.MEANS_master %>%
dplyr::filter(measurement %in% 'Dry_Shell_weight_g')
F1_DryShell.raw.MEAN$DPvar    <- F1_DryShell.raw.MEAN$value
F1_DryShell.raw.MEAN$INDvar   <- F1_DryShell.raw.MEAN$pCO2
F1_DryShell.raw.MEAN$GROUPvar <- F1_DryShell.raw.MEAN$Age
Stats_ShellMEAN_raw <- as.data.frame(runstats(F1_DryShell.raw.MEAN))
Ttest_ShellMEAN_raw <- as.data.frame(run_ttest(F1_DryShell.raw.MEAN))
# About column
Stats_ShellMEAN_raw$About <- paste0("Shell: raw, NO BFACTOR + mean data")
Ttest_ShellMEAN_raw$About <- paste0("Shell: raw, NO BFACTOR + mean data")
F1_DryShell.bfactor.MEAN <- F1_DryShell.bfactor.long.MEANS_master %>%
dplyr::filter(measurement %in% 'Shell_bFactorLength.all')
F1_DryShell.bfactor.MEAN$DPvar    <- F1_DryShell.bfactor.MEAN$value
F1_DryShell.bfactor.MEAN$INDvar   <- F1_DryShell.bfactor.MEAN$pCO2
F1_DryShell.bfactor.MEAN$GROUPvar <- F1_DryShell.bfactor.MEAN$Age
Stats_ShellMEAN_bfactor.all <- as.data.frame(runstats(F1_DryShell.bfactor.MEAN))
Ttest_ShellMEAN_bfactor.all <- as.data.frame(run_ttest(F1_DryShell.bfactor.MEAN))
# About column
Stats_ShellMEAN_bfactor.all$About <- paste0("Shell: one bfactor + mean data")
Ttest_ShellMEAN_bfactor.all$About <- paste0("Shell: one bfactor + mean data")
# means by replicate tank within treamtent and day/age
F1_DryShell.bfactor.MEAN <- F1_DryShell.bfactor.long.MEANS_master %>%
dplyr::filter(measurement %in% 'Shell_bFactorLength.pCO2')
F1_DryShell.bfactor.MEAN$DPvar    <- F1_DryShell.bfactor.MEAN$value
F1_DryShell.bfactor.MEAN$INDvar   <- F1_DryShell.bfactor.MEAN$pCO2
F1_DryShell.bfactor.MEAN$GROUPvar <- F1_DryShell.bfactor.MEAN$Age
Stats_ShellMEAN_bfactor.pCO2 <- as.data.frame(runstats(F1_DryShell.bfactor.MEAN))
Ttest_ShellMEAN_bfactor.pCO2 <- as.data.frame(run_ttest(F1_DryShell.bfactor.MEAN))
# About column
Stats_ShellMEAN_bfactor.pCO2$About <- paste0("Shell: two pCO2 bfactors + mean data")
Ttest_ShellMEAN_bfactor.pCO2$About <- paste0("Shell: two pCO2 bfactors + mean data")
ShellMaster_Ttest <- rbind(Ttest_ShellMEAN_raw, Ttest_ShellMEAN_bfactor.all, Ttest_ShellMEAN_bfactor.pCO2)
write.csv(ShellMaster_Ttest, "Output/DryWeights/F1/F1_Shell_DryWeight_Ttest_table.csv")
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(performance)
library(car)
library(ggpubr)
library(SciViews)
library(Rmisc)
library(ggpmisc)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/EAD-ASEB-Airradians_F1F2_Growout_OA/RAnalysis")
# F2s
F2_dryweights <- read.csv(file="Data/Physiology/Dry_weights/F2/cumulative_raw/F2_dry_weights_raw_2.csv",
header=T,stringsAsFactors=FALSE, fileEncoding="latin1")
F2_dryweights <- F2_dryweights[!is.na(F2_dryweights$Tank_Replicate),]      # seven indivuals did not have tnak ID on the bag (Gabby P. review google doc!" and are omitted
# unique dates for the dry weight data
unique(F2_dryweights$Date_sampled)
# View(F1_dryweights)
F2_dryweights <- F2_dryweights[!is.na(F2_dryweights$pH),] %>% # master data file
dplyr::mutate(pCO2 = as.factor(case_when(pH == 8 ~ "500 μatm", # add column for pCO2
pH == 7.5 ~ "800 μatm",
pH == 7 ~ "1200 μatm"))) %>%
dplyr::mutate(Age = case_when(Date_sampled == "11/16/2022" ~  93, # A- D for each treatment
Date_sampled == "1/27/2023" ~  165, # A- D for each treatment
#NOTE: A-G started on 2/3/2023 unlike F1s, this was note A - E and B to F,
# the bins are separate reps, G disappears from the chemistry data at 2/28/2023
Date_sampled == "2/27/2023" ~  196, # A-G
Date_sampled == "3/23/2023" ~  220, # A-F
Date_sampled == "3/28/2023" ~  225)) %>%  # A-F
dplyr::mutate(pCO2 = fct_relevel(pCO2, c("500 μatm","800 μatm","1200 μatm")))# relevel for plotting!
# first, lets reshape to assist in calculating all the means in LONG format
library(tidyr)
F2_dryweights$Shell_length_mm <- as.numeric(F2_dryweights$Shell_length_mm)
colnames(F2_dryweights)
F2_dryweights_long <- F2_dryweights %>%
dplyr::mutate(row = row_number()) %>%
# because there are duplicates - complicates pivot_wider later
dplyr::select(Age, pCO2, Tank_Replicate, row,
Shell_length_mm,
Dry_Shell_weight_g, Dry_Gonad_weight_g,
Dry_Muscle_weight_g, Dry_Tissue_weight_g
#Tissue_AFDW_g, Total_Dry_Tissue_g, Total_AFDW_g, Whole_animal_dry_weight_g
) %>%
dplyr::rename(Dry_Adductor_Tissue_g = Dry_Muscle_weight_g) %>%
dplyr::mutate(Dry_Somatic_Tissue_g = case_when(Dry_Gonad_weight_g %in% NA ~ NA,
TRUE ~ Dry_Tissue_weight_g),
Total_Dry_Tissue_g = case_when( Dry_Gonad_weight_g %in% NA ~ Dry_Tissue_weight_g,
TRUE ~ (Dry_Gonad_weight_g +
Dry_Adductor_Tissue_g +
Dry_Tissue_weight_g)),
Dry_Tissue_weight_g = case_when(Dry_Gonad_weight_g %in% NA ~ Dry_Tissue_weight_g,
TRUE ~ NA)) %>%
dplyr::select(!Dry_Tissue_weight_g) %>%
tidyr::pivot_longer(
cols = c('Shell_length_mm',
'Dry_Shell_weight_g', 'Dry_Gonad_weight_g',
'Dry_Adductor_Tissue_g', 'Dry_Somatic_Tissue_g', 'Total_Dry_Tissue_g'#,
#'Tissue_AFDW_g', 'Total_Dry_Tissue_g', 'Total_AFDW_g', 'Whole_animal_dry_weight_g'
),
names_to = "measurement",
values_to = "value"
) %>%
na.omit()
## step 1 calc means by replicate tank
F2_dryweights_calc.long.MEANS    <- F2_dryweights_long %>%
summarySE(measurevar="value",
groupvars=c("Age","pCO2", "Tank_Replicate", "measurement")) %>%
dplyr::arrange(as.numeric(Age), measurement, pCO2, Tank_Replicate)
write.csv(F2_dryweights_calc.long.MEANS, "Output/DryWeights/F2/F2_N_per_Replicate_MeanSE.csv")
## step 3:  convert E-H to A-D and summarise again to get the median
# * note: ignore sd, se, etc, as there as N now ==1 or 2 in all cases, refer to the output file above
# if you want the actual N for each replicate along with the variation within replicate!
F2_dryweights_calc.long.MEANS_master <- F2_dryweights_calc.long.MEANS %>%  # noew convert and resummarize by tank
# dplyr::mutate(Tank_Replicate = case_when(
#               Tank_Replicate == 'E' ~ 'A', #convert E to A
#               Tank_Replicate == 'F' ~ 'B', #convert F to B
#               Tank_Replicate == 'G' ~ 'C', #convert G to C
#               Tank_Replicate == 'H' ~ 'D', #convert H to D
#               .default = (as.character(Tank_Replicate)) # for cases A-D, keep em my mans
#             )) %>%
summarySE(measurevar="value",
groupvars=c("Age","pCO2", "Tank_Replicate", "measurement")) %>% # summarize again
dplyr::arrange(as.numeric(Age), measurement, pCO2, Tank_Replicate) %>%
dplyr::select(-c(sd, se, ci)) # N = number of means!!! N = 2 means there awas a A+E, etc and mean == median
runstats <- function(datafilename,  outputfilename) {
# variables for both for loops
DF_loop           <- data.frame(matrix(nrow = 1, ncol = 11)) # create dataframe to save during for loop
colnames(DF_loop) <- c('Age_DPF', 'ShapiroWilk', 'ResidNorm',
'Levenes', 'HomogVar', 'model',
'DF.num' , 'DF.denom',
'F_val','P_val', 'SigDif') # names for comuns in the for loop
unique(datafilename$Age)
outputfilename <- data.frame()
for (i in 1:length(unique(datafilename$Age))) {
GROUPvar_loop <- unique(datafilename$GROUPvar)[i]
Data_all      <- datafilename %>% dplyr::filter(GROUPvar %in% GROUPvar_loop)
# Data_mean   <- Data_all %>% summarySE(measurevar="DPvar",
#                                       groupvars=c("group1","Tank_Replicate", "INDvar"))
AOVmod      <- aov(lm(Data_all$DPvar ~ as.factor(Data_all$INDvar))) # CHANGE HERE!
KWmod       <- kruskal.test(Data_all$DPvar  ~ as.factor(Data_all$INDvar)) # CHANGE HERE!
# DF_loop$About <- paste0("Gonad: All bfactor + mean by replicate")
# DF_loop$About <- paste0("Gonad: All bfactor + all data")  # normality tests for the anova model - asign
DF_loop$ShapiroWilk <- shapiro.test(resid(AOVmod))[[2]]
DF_loop$ResidNorm   <- if( shapiro.test(resid(AOVmod))[[2]] > 0.05) {
'YES'} else {'NO'}
DF_loop$Levenes     <- leveneTest(AOVmod)[[3]][[1]]
DF_loop$HomogVar    <- if( leveneTest(AOVmod)[[3]][[1]] > 0.05) {
'YES'} else {'NO'}
if(shapiro.test(resid(AOVmod))[[2]] > 0.05 & leveneTest(AOVmod)[[3]][[1]] > 0.05) {
DF_loop$model       <- 'one-way AOV; x ~ treatment'
DF_loop$DF.num      <- summary(AOVmod)[[1]][["Df"]][1]
DF_loop$DF.denom    <- summary(AOVmod)[[1]][["Df"]][2]
DF_loop$F_val       <- summary(AOVmod)[[1]][["F value"]][1]
DF_loop$P_val       <- summary(AOVmod)[[1]][["Pr(>F)"]][1]
DF_loop$SigDif      <- if( (summary(AOVmod)[[1]][["Pr(>F)"]][1]) > 0.05) {
'NO'} else {'YES'}
} else {
DF_loop$model       <- 'kruskal-wallis; x ~ treatment'
DF_loop$DF.num      <- (KWmod)[[2]][["df"]][1]
DF_loop$DF.denom    <- NA
DF_loop$F_val       <- NA
DF_loop$P_val       <- (KWmod)[[3]]
DF_loop$SigDif      <- if( ((KWmod)[[3]]) > 0.05) {
'NO'} else {'YES'}
}
DF_loop$Age_DPF     <- GROUPvar_loop
# asign loop and cumulative output table
df                        <- data.frame(DF_loop) # name dataframe for this single row
outputfilename <- rbind(outputfilename,DF_loop) #bind to a cumulative list dataframe
# print(outputfilename) # print to monitor progress
}
return(outputfilename)
}
run_ttest <- function(datafilename,  outputfilename) {
# variables for both for loops
DF_loop           <- data.frame(matrix(nrow = 1, ncol = 13)) # create dataframe to save during for loop
colnames(DF_loop) <- c('Age_DPF', 'model', 'ShapiroWilk', 'ResidNorm', 'Variance',
'HomogVar', 'DF.num' , 'DF.denom',
'Tstat','P_val', 'SigDif', 'Effsize') # names for comuns in the for loop
unique(datafilename$Age)
outputfilename <- data.frame()
for (i in 1:length(unique(datafilename$Age))) {
GROUPvar_loop <- unique(datafilename$GROUPvar)[i]
Data_all      <- datafilename %>% dplyr::filter(GROUPvar %in% GROUPvar_loop)
# Data_mean   <- Data_all %>% summarySE(measurevar="DPvar",
#                                       groupvars=c("group1","Tank_Replicate", "INDvar"))
# run assumptions
# normality of data
normality_A <- (Data_all %>%
group_by(as.factor(INDvar)) %>%
rstatix::shapiro_test(DPvar))$p[1]
normality_B <- (Data_all %>%
group_by(as.factor(INDvar)) %>%
rstatix::shapiro_test(DPvar))$p[2]
# equal variance
variance <- (Data_all %>% rstatix::levene_test(DPvar ~ as.factor(INDvar)))$p[1]
# run all modles
Ttestmod.eqvar      <- t.test(Data_all$DPvar ~ (as.factor(Data_all$INDvar)),
alternative = "greater",
var.equal = TRUE)
Ttestmod.noneqvar   <- t.test(Data_all$DPvar ~ (as.factor(Data_all$INDvar)),
alternative = "greater",
var.equal = FALSE)
Wilcoxmod           <- wilcox.test(Data_all$DPvar ~
as.numeric(as.factor(Data_all$INDvar)))
# run cohensd for effect size
eff_size_cohensd            <- cohensD(DPvar ~ INDvar, data = Data_all, method = "pooled")
eff_size_cohensd_unequal    <- cohensD(DPvar ~ INDvar, data = Data_all, method = "unequal") # if ttest d/n meet welchs assumption
eff_size_wilcox             <- rstatix::wilcox_effsize(DPvar ~ INDvar, data = Data_all)
# normality tests for the anova model - asign
DF_loop$ShapiroWilk <- paste0(normality_A, '; ',normality_B)
DF_loop$ResidNorm   <- if(normality_A > 0.05 & normality_B > 0.05) {
'YES'} else {'NO'}
DF_loop$Variance     <- variance
DF_loop$HomogVar    <- if( variance > 0.05) {
'YES'} else {'NO'}
if(normality_A > 0.05 & normality_B > 0.05 & variance > 0.05) {
DF_loop$model       <- 'Welchs T test, equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.eqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.eqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
DF_loop$Effsize     <- signif(eff_size_cohensd[[1]], 3)
} else if (normality_A > 0.05 & normality_B > 0.05 & variance < 0.05) {
DF_loop$model       <- 'Welchs T test, non-equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.noneqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.noneqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
DF_loop$Effsize     <- signif(eff_size_cohensd_unequal[[1]], 3)
} else {
DF_loop$model       <- 'Wilcoxon rank sum exact test'
DF_loop$DF.num      <- 'NA'
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Wilcoxmod), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Wilcoxmod), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Wilcoxmod), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
DF_loop$Effsize     <- signif(eff_size_wilcox$effsize[[1]], 3)
}
DF_loop$Age_DPF     <- GROUPvar_loop
# asign loop and cumulative output table
df                        <- data.frame(DF_loop) # name dataframe for this single row
outputfilename <- rbind(outputfilename,DF_loop) #bind to a cumulative list dataframe
# print(outputfilename) # print to monitor progress
}
return(outputfilename)
}
Proportion_master <- F2_dryweights_long %>%
#F2_dryweights_calc.long.MEANS_master %>%
dplyr::filter(measurement %in% c('Dry_Gonad_weight_g',
'Dry_Somatic_Tissue_g',
'Dry_Adductor_Tissue_g',
'Total_Dry_Tissue_g')) %>%
tidyr::pivot_wider(
names_from = measurement,
values_from = value
) %>%
na.omit() %>% # omit cases where we do not have gonad weight (there are a few!)
dplyr::mutate(Proportion_Gonad    = Dry_Gonad_weight_g/Total_Dry_Tissue_g,
Proportion_Adductor = Dry_Adductor_Tissue_g/Total_Dry_Tissue_g,
Proportion_Somatic  = Dry_Somatic_Tissue_g/Total_Dry_Tissue_g,
Sanity_check_prop_total = (Proportion_Gonad +
Proportion_Adductor +
Proportion_Somatic))
Proportion_master_long <- Proportion_master[,c(1:2,9:11)] %>%
tidyr::pivot_longer(cols = c(3:5), names_to='prop_metric', values_to='value')
#convert metric to ordered factor
Proportion_master_long_ordered             <- Proportion_master_long[order(Proportion_master_long$prop_metric ),]
Proportion_master_long_ordered$prop_metric <- factor(Proportion_master_long_ordered$prop_metric,
levels = rev(c(rep("Proportion_Somatic",1),
rep("Proportion_Adductor",1),
rep("Proportion_Gonad",1))))
Proportion_master_long_MEANS <- Proportion_master_long_ordered %>%
dplyr::mutate(prop_metric =
forcats::fct_relevel(prop_metric,
"Proportion_Somatic",
"Proportion_Gonad",
"Proportion_Adductor")) %>%
group_by(Age, pCO2, prop_metric) %>%
dplyr::summarise(mean = mean(value), sd =sd(value)) %>%
mutate(y_pos = cumsum(mean))
Proportion_master_long_MEANS$prop_metric <- factor(Proportion_master_long_MEANS$prop_metric,
levels = rev(c(rep("Proportion_Somatic",1),
rep("Proportion_Gonad",1),
rep("Proportion_Adductor",1))))
# stacked proportion plot
pd <- position_dodge2(width = 0.2)
Proportion_master_long_MEANS$prop_metric <- as.character(Proportion_master_long_MEANS$prop_metric)
Proportion_StackedBarplot <- Proportion_master_long_MEANS %>%
ggplot(aes(x = as.factor(Age),
y = mean,
fill = prop_metric)) +
geom_bar(stat = "identity", width=0.7) +
scale_fill_manual(values = c("grey80","grey40", "grey20")) +
#scale_fill_manual(values = c("#0072B2", "#D55E00")) + # colorblindness palette blue and orange
geom_errorbar(aes(ymax = y_pos + sd, ymin=y_pos - sd), stat = "identity", width = 0.1, alpha = 0.7, position = pd) +
facet_wrap(~pCO2) +
scale_alpha_manual(values=c(seq(0.3,1, length.out = 3))) +
theme_bw() +
scale_y_continuous(breaks = seq(from = 0, to = 100, by = 10)) +
ylim(0,1.1)+
ylab("Dry Tissue Proportions (%)")
Proportion_Gonad_plot <- Proportion_master %>%
# dplyr::filter((!value > 20)) %>%
ggplot(aes(x=factor(Age), y=Proportion_Gonad, colour=factor(pCO2)),stat="identity") +
scale_colour_manual(breaks=c("500 μatm", "800 μatm", "1200 μatm"),
values=c("forestgreen","darkorange2", "purple")) +
stat_summary(fun.y="mean", size = 0.8,
position = position_dodge2(width = 0.25)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar', width = 0.25, size = 1,
position = position_dodge2(width = 0.5)) +
labs(title="Proportion Gonad to Total Tissue",
x ="Age (dpf)",
y = "Dry gonad (proportion)") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=1),
axis.text=element_text(size=8),
plot.title = element_text(size=12),
legend.position="none")
Proportion_Adductor_plot <- Proportion_master %>%
# dplyr::filter((!value > 20)) %>%
ggplot(aes(x=factor(Age), y=Proportion_Adductor, colour=factor(pCO2)),stat="identity") +
scale_colour_manual(breaks=c("500 μatm", "800 μatm", "1200 μatm"),
values=c("forestgreen","darkorange2", "purple")) +
stat_summary(fun.y="mean", size = 0.8,
position = position_dodge2(width = 0.25)) +
stat_summary(fun.min = function(x) mean(x) - sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x) + sd(x)/sqrt(length(x)),
geom = 'errorbar', width = 0.25, size = 1,
position = position_dodge2(width = 0.5)) +
labs(title="Proportion Adductor to Total Tissue", x ="Age (dpf)", y = "Dry Adductor (proportion)") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=1),
axis.text=element_text(size=8),
plot.title = element_text(size=12),
legend.position="none")
# Gonad (to total tissue)
F2_Proportion_Gonad_MEANS <- Proportion_master %>%
dplyr::select(Age,pCO2, Tank_Replicate,
Proportion_Gonad) %>%
summarySE(measurevar="Proportion_Gonad",
groupvars=c("Age","pCO2", "Tank_Replicate")) %>%
dplyr::arrange(as.numeric(Age))
F2_Proportion_Gonad_MEANS %>% summarySE(measurevar="Proportion_Gonad",
groupvars=c("Age","pCO2"))
library(purrr)
library(rstatix)
F2_Proportion_Gonad_MEANS$DPvar    <- F2_Proportion_Gonad_MEANS$Proportion_Gonad
F2_Proportion_Gonad_MEANS$INDvar   <- F2_Proportion_Gonad_MEANS$pCO2
F2_Proportion_Gonad_MEANS$GROUPvar <- F2_Proportion_Gonad_MEANS$Age
ProportionGonad_stats <- as.data.frame(runstats(F2_Proportion_Gonad_MEANS)) # sig effect on Age 196 and 220
ProportionGonad_ttest <- as.data.frame(run_ttest(F2_Proportion_Gonad_MEANS %>%
dplyr::filter(!(pCO2 %in% '1200 μatm')) %>%
droplevels())) # sig for all
library(lsr)
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(performance)
library(car)
library(ggpubr)
library(SciViews)
library(Rmisc)
library(ggpmisc)
library(purrr)
library(rstatix)
library(lsr)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/EAD-ASEB-Airradians_F1F2_Growout_OA/RAnalysis")
F2_Proportion_Gonad_MEANS
F2_Proportion_Gonad_MEANS %>% dplyr::filter(Age %in% 165)
F2_Proportion_Gonad_MEANS
F2_Proportion_Gonad_MEANS %>% dplyr::filter(Age %in% 165) %>% dplry::filter(!(pCO2 %in% '1200 μatm'))
F2_Proportion_Gonad_MEANS %>% dplyr::filter(Age %in% 165) %>% dplyr::filter(!(pCO2 %in% '1200 μatm'))
F2_Proportion_Gonad_MEANS %>% dplyr::filter(Age %in% 165) %>% dplyr::filter(!(pCO2 %in% '1200 μatm')) %>% droplevels()
test <- F2_Proportion_Gonad_MEANS %>% dplyr::filter(Age %in% 165) %>% dplyr::filter(!(pCO2 %in% '1200 μatm')) %>% droplevels
F2_Proportion_Gonad_MEANS
cohens_d(Proportion_Gonad ~ pCO2, data=F2_Proportion_Gonad_MEANS)
test <- F2_Proportion_Gonad_MEANS %>% dplyr::filter(Age %in% 165) %>% dplyr::filter(!(pCO2 %in% '1200 μatm')) %>% droplevels
cohens_d(Proportion_Gonad ~ pCO2, data=test)
